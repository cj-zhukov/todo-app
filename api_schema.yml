openapi: 3.0.0
info:
  title: Todo Service App
  description: Rust app that stores todo in postgres database with axum and sqlx 
  version: 1.0.0

servers:
  - url: 'http://todos.com/api'
    description: Main server

paths:
  /alive:
    get:
      summary: Check is service alive
      description: This route serves checking service status
      responses:
        '200':
          description: Service is alive

  /todos:
    get:
      summary: List all todo tasks
      description: This route serves getting all todo tasks
      responses:
        '200':
          description: List all todo
          content:
            text/html:
              schema:
                type: string
    post:
      summary: Create a new todo task
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                body:
                  type: string
              example:
                body: foo
      responses:
        '201':
          description: Todo task created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Todo task created successfully
  /todos{taskId}:
    get:
      summary: Find todo task by ID
      description: This route serves getting todo task by id
      parameters:
        - name: taskId
          in: path
          description: ID of task that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'  
    put:
      summary: Update a todo task
      description: This route serves updating a new toto task
      parameters:
        - name: taskId
          in: path
          description: ID of todo that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid input    
          
    delete:
      summary: Delete todo task id
      description: This route serves deleteing todo task by id
      parameters:
        - name: taskId
          in: path
          description: ID of the todo task that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Todo task was delete 
        '400':
          description: Invalid ID supplied
        '404':
          description: Todo task not found

components:
  schemas:
    Todo:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        body:
          type: string
          example: "foo"
        completed:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time